                    <section>
                        <h2>Destructuring Assignment</h2>
                        <pre><code class="js" data-trim>
</code></pre><pre class="fragment"><code class="js" data-trim>
</code></pre>
                    </section>
                    <section>
                        <h2>Iterators &amp; Generators</h2>
                        <pre><code class="js" data-trim>// previously
...?
</code></pre><pre class="fragment"><code class="js" data-trim>// ES6
function* intsBetween(min, max) {des
  for (var i = min; i < max; i++) {
    yield i;
  }
}

var result = [];
for (let value of intsBetween(4, 10)) {
  result.push(value);
}
expect(result).toEqual([4, 5, 6, 7, 8, 9, 10]);
</code></pre>
                        <aside class="notes">
                            A generator function needs to be annotated as function* instead of just function.
                        </aside>
                    </section>
                    <section>
                        <h2>Modules</h2>
                        <pre><code class="js" data-trim>// previously
// (SomeLibrary.js)
var SomeLibrary = (function() {
  var internalVar = 'a';

  return {
    externalVar: internalVar + 'b';
  };
})();

// (Main.js)
expect(SomeLibrary.externalVar).toBe('ab');
</code></pre><pre><code class="xml" data-trim>&lt;!-- (in index.html) --&gt;
&lt;script src="SomeLibrary.js"&gt;&lt;/script&gt;
&lt;script src="Main.js"&gt;&lt;/script&gt;
</code></pre><div class="fragment"><pre><code class="js" data-trim>// ES6
// (SomeLibrary.js)
var internalVar = 'a';
export var externalVar = internalVar + 'b';

// (Main.js)
import {externalVar} from './SomeLibrary';

expect(externalVar).toBe('ab');
</code></pre><pre><code class="xml" data-trim>&lt;!-- (in index.html) loads both! --&gt;
&lt;script type="module" src="Main.js"&gt;&lt;/script&gt;
</code></pre></div>
                    </section>
                    <section>
                        <h2>Async Functions &amp; Await</h2>
                        <pre><code class="js" data-trim>// previously
function asyncValue(value, callback) {
  setTimeout(function() {
    callback(value);
  }, 50);
}

(function() {
  asyncValue(42, function(value) {
    assert.equal(42, value);
    done();
  });
})();
</code></pre><div class="fragment"><pre><code class="js" data-trim>// ES6
function timeout(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

async function asyncValue(value) {
  await timeout(50);
  return value;
}

(async function() {
  var value = await asyncValue(42);
  assert.equal(42, value);
  done();
})();
</code></pre>
                    </section>
                    <section>
                        <h2>Learn more</h2>
                        <ul>
                            <li><a href="https://github.com/google/traceur-compiler/wiki/LanguageFeatures">More Features and detail</a></li>
                        </ul>
                    </section>
                    <section>
                        <h2>Cool Stuff! But...</h2>
                        <ul>
                            <li class="fragment">Can't be used in production!</li>
                            <li class="fragment">Target ES6 "Release" date: <b>December 2014</b></li>
                            <li class="fragment">Old browsers still won't have it!</li>
                        </ul>
                    </section>
                    <section>
                        <h2>What to do?</h2>
                        <ul>
                            <li class="fragment"><a href="https://github.com/google/traceur-compiler">Google Traceur Compiler</a></li>
                            <li class="fragment">Compiles ES6 code into ES5</li>
                            <li class="fragment">Online and offline compilation</li>
                            <li class="fragment">Subject to many changes, still not good for production!</li>
                        </ul>
                    </section>
                </section>
                <section>
                    <section>
                        <h1>Web Components</h1>
                    </section>
                    <section>
                        <h2>How current webapps work</h2>
                        <p>"Separate Presentation from Business Logic"</p>
                        <ul style="list-style: none">
                        <li>
                            <span>"Presentation" &rarr;</span>
                            <span>CSS</span>
                        </li>
                        <li>
                            <span>"Business Logic" &rarr;</span>
                            <span>JavaScript</span>
                        </li>
                        <li>
                            <span>"Structure" &rarr;</span>
                            <span>HTML</span>
                        </li>
                        </ul>
                    </section>
                    <section>
                        <h2>How do we organize it?</h2>
                        <ul>
                            <li>Javascript in RequireJS modules</li>
                            <li class="fragment">HTML in.... templates.. most of the time?</li>
                            <li class="fragment">A few <em>huge</em> CSS files</li>
                            <li class="fragment">All entangled and hard to separate</li>
                        </ul>
                    </section>
                    <section>
                        <h2>Reusing HTML/CSS/JS - common questions</h2>
                        <p class="fragment roll-in">
                            <q>&ldquo;What part of the CSS does this HTML need?&rdquo;</q>
                        </p>
                        <p class="fragment roll-in">
                            <q>&ldquo;Where is the behavior for this chunk of HTML?&rdquo;</q>
                        </p>
                        <p class="fragment roll-in">
                            <q>&ldquo;Does that behavior need other parts of my app to work?&rdquo;</q>
                        </p>
                        <p class="fragment roll-in">
                            <q>&ldquo;Did I import all the correct files for this library?&rdquo;</q>
                        </p>
                        <p class="fragment roll-in">
                            <q>&ldquo;What's the required HTML for this library again?&rdquo;</q>
                        </p>
                    </section>
                    <section>
                        <h1>Enter Web Components</h1>
                    </section>
                    <section>
                        <h2>Put HTML, CSS, and JavaScript all together</h2>
                        <ul>
                            <li>Self contained, encapsulated</li>
                            <li>Easily reused</li>
                            <li>Can work in isolation</li>
                            <li>Import other components in a one-liner</li>
                            <li>What about separating presentation and business logic?
                                <ul class="fragment">
                                    <li>Each language still has its purpose</li>
                                    <li>Encapsulation and cohesiveness is important</li>
                                </ul>
                            </li>
                        </ul>
                    </section>
                    <section>
                        <h2>Using a Popup library</h2>
                        <p>Messy HTML<pre><code class="xml">&lt;div class="popup-panel"&gt;
  &lt;div class="header"&gt;
    &lt;h2&gt;Header Content&lt;/h2&gt;
    &lt;div class="close-button"&gt;X&lt;/div&gt;
  &lt;/div&gt;
  &lt;p class="content"&gt;Some content&lt;/p&gt;
&lt;/div&gt;
</code></pre></p>
                    <p>There's no <em>encapsulation</em> of HTML structure...</p>
                        <div class="fragment">
                            <p>With Web Components<pre>
<code class="xml" data-trim>&lt;popup closeable="true" header="Header Content"&gt;
    Some content
&lt;/popup&gt;
</code></pre>
                            </p>
                        </div>
                    </section>
                    <section>
                        <p>So, what <em><b>are</b></em></p>
                        <h2>Web Components?</h2>
                        <ul>
                            <li>
                                <a target="_window" href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/#toc-separation">Templates</a>
                            </li>
                            <li>
                                <a target="_window" href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM</a>
                            </li>
                            <li>
                                <a target="_window" href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/">HTML Imports</a>
                            </li>
                            <li>
                                <a target="_window" href="http://www.html5rocks.com/en/tutorials/webcomponents/customelements">Custom Elements</a>
                            </li>
                        </ul>
                    </section>
                    <section>
                        <h2>Templates</h2>
                        <ul>
                            <li>Specify blocks of HTML to be used as a template</li>
                            <li>Content can't be seen by <code>querySelector</code></li>
                            <li>Doesn't execute any scripts inside the HTML</li>
                        </ul>
                        <p><pre><code class="xml">&lt;template id="user-card"&gt;
  &lt;script&gt;alert("This won't run on load!");&lt;/script&gt;
  &lt;div&gt;Content, but is hidden from normal DOM&lt;/div&gt;
&lt;/template&gt;
</code></pre></p>
                    </section>
                    <section>
                        <h2>Shadow DOM</h2>
                        <ul>
                            <li>Separate DOM from the main one</li>
                            <li>Used for all the presentation-specific HTML</li>
                            <li>Prevents accidental overriding of CSS or unintended Javascript behavior</li>
                            <li>Leaves regular DOM nice and clean</li>
                            <li>Allows for HTML <em>encapsulation</em></li>
                        </ul>
                    </section>
                    <section>
                        <h2>No Shadow DOM <small></small></h2>
                        <p>Using <code>highlight.js</code> to render code in HTML<pre><code>var fooTheBar = function(bar) {
  return 'foo' + bar;
};
</code></pre></p><p>view source, and you see this mess<pre><code class="xml">&lt;code class="javascript"&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; fooTheBar = &lt;span class="function"&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="params"&gt;(bar)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;'foo'&lt;/span&gt; + bar;
};
</code>
</code></pre>
                    </section>
                    <section>
                        <h2>With Shadow DOM <small>(example)</small></h2>
                        <p>View source and see<pre><code class="xml">&lt;code type="javascript"&gt;
  var fooTheBar = function(bar) {
    return 'foo' + bar;
  };
&lt;/code&gt;
</code></pre></p>
                        <ul>
                            <li>All the same markup is still there, just under the covers</li>
                        </ul>
                    </section>
                    <section>
                        <h2>HTML Imports</h2>
                        <ul>
                            <li>Lets you fetch an HTML document like we currently do CSS or images</li>
                            <li>Can themselves have imports, which are fetched recursively</li>
                            <li>Can define styles, templates, etc</li>
                            <li>HTML imports become your "dependencies"</li>
                        </ul>
                        <p><pre>
<code class="xml" data-noescape data-trim>&lt;link rel="import" href="header.html" id="header-import"&gt;
&lt;script&gt;
  var headerDoc = document.getElementById('header-import').import;
  headerDoc.querySelector('#some-id-in-the-header-file');
&lt;/script&gt;
</code></pre></p>
                    </section>
                    <section>
                        <h2>Custom Elements</h2>
                        <ul>
                            <li>Ties everything together</li>
                            <li>Tags can have custom behavior</li>
                            <li>Indistinguishable from native elements like &lt;input&gt;</li>
                            <li>Lifecycle events can control the element</li>
                            <li>Events fire when properties change</li>
                        </ul>
                        <p><pre><code class="js" data-trim>var XFooProto = Object.create(HTMLElement.prototype, {
    bar: {
      get: function() { return 5; }
    },
    foo: {
      value: function() {
        alert('foo() called');
      }
    }
  });

XFooProto.createdCallback = function() {
  this.innerHTML = "<b>Testing 123!</b>";
};

var XFoo = document.registerElement('x-foo', {
  prototype: XFooProto
});
</code></pre></p>
                    </section>
                    <section>
                        <h2>A little complicated...</h2>
                    </section>
<section data-background="no-repeat center url('http://www.polymer-project.org/images/logos/p-logo.svg')">
                        <h2><a href="http://www.polymer-project.org/">Polymer</a></h2>
                        <ul>
                            <li>Library putting all these technologies together</li>
                            <li>Works as a polyfill for tech until it's a standard</li>
                            <li>Library shrinks as more standards are implemented</li>
                            <li>Makes these standards easier to use</li>
                        </ul>
                    </section>
                    <section>
                        <h2>Polymer Custom Elements</h2>
                        <ul>
                            <li>A layer on top of the standard</li>
                            <li>Provides a combined API for web component features</li>
                            <li>Templating is built-in, since it's such a common use-case</li>
                        </ul>
                        <p><pre><code class="auto" data-noescape>
&lt;polymer-element name="x-foo" attributes="bar"&gt;
  &lt;style&gt;
    .numbers {
        color: blue;
    }
  &lt;/style&gt;
  &lt;template&gt;
    &lt;b&gt;Testing &lt;span class="numbers"&gt;123!&lt;/span&gt;&lt;/b&gt;
  &lt;/template&gt;
  &lt;script&gt;
    Polymer('x-foo', {
      bar: 5,
      foo: function() {
        alert('foo() called');
      }
    });
  &lt;/script&gt;
&lt;/polymer-element&gt;
</code></pre></p>
                    </section>
                    <section>
                        <h2>Some neat examples</h2>
                        <ul>
                            <li><a href="/examples/dismissable">Raw templates and Shadow DOM</a></li>
                            <li><a href="/examples/github">Polymer "codeless" JSON download</a></li>
                            <li><em>Note: </em> these APIs are evolving
                                <ul>
                                    <li>Aren't standards yet</li>
                                    <li>Polymer is only supported for "evergreen" browsers</li>
                                    <li>Might need to enable settings in <code>chrome://flags</code>
                                        <ul>
                                            <li><a target="_window" href="chrome://flags/#enable-experimental-web-platform-features">Enable experimental Web Platform features</a></li>
                                            <li><a target="_window" href="chrome://flags/#enable-html-imports">Enable HTML Imports</a></li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </section>
                    <section>
                        <h2>Wrap Up</h2>
                        <ul>
                            <li>FluentConf was awesome</li>
                            <li>New tech is exciting!</li>
                            <li>Can't use it in serious apps yet</li>
                            <li>But, it's good to be prepared!</li>
                        </ul>
                        <p class="fragment">
                            <br/>
                            Now <em>you too</em> can be a <b>Web Components hipster!</b>
                        </p>
                    </section>
                    <section>
                        <h2>Questions?</h2>
                        <img src="img/hipster.jpg"/>
                    </section>
                </section>
